subprojects { project ->
    def exclusions = getExcludeModulesToScan()
    if (!exclusions.contains(project.name)) {
        project.plugins.withId("com.android.application") {
            configureJacoco(project)
        }
        project.plugins.withId("com.android.library") {
            configureJacoco(project)
        }
    }
}

def configureJacoco(Project project) {
    project.apply plugin: "jacoco"

    project.jacoco {
        toolVersion = "0.8.10"
    }

    project.afterEvaluate {
        tasks.withType(Test).configureEach {
            jacoco.includeNoLocationClasses = false
        }

        def android = project.extensions.getByName("android")

        def buildTypes = android.buildTypes.collect { type -> type.name }
        def productFlavors = android.productFlavors.collect { flavor -> flavor.name }

        if (!productFlavors) productFlavors.add("")

        productFlavors.each { productFlavorName ->
            buildTypes.each { buildTypeName ->
                def sourceName = productFlavorName ? "${productFlavorName}${buildTypeName.capitalize()}" : buildTypeName
                def testTaskName = "test${sourceName.capitalize()}UnitTest"
                println("Task -> $testTaskName")
                // Add Jacoco reporting logic if needed
            }
        }
    }
}

def getExcludeModulesToScan() {
    def propsFile = rootProject.file('scan.properties')
    def props = new Properties()
    props.load(new FileInputStream(propsFile))
    return props['excludeModulesToScan'].split(',').toList()
}
ext {
    getExcludeModulesToScan = this.&getExcludeModulesToScan
}
